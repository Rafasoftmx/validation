<?php
/*
             _ _     _       _   _                             
            | (_)   | |     | | (_)                            
 __   ____ _| |_  __| | __ _| |_ _  ___  _ __                  
 \ \ / / _` | | |/ _` |/ _` | __| |/ _ \| '_ \                 
  \ V / (_| | | | (_| | (_| | |_| | (_) | | | |                
  _\_/_\__,_|_|_|\__,_|\__,_|\__|_|\___/|_|_|_|  ___  __  ___  
 |  __ \      / _|               / _| |   |__ \ / _ \/_ |/ _ \ 
 | |__) |__ _| |_ __ _ ___  ___ | |_| |_     ) | | | || | (_) |
 |  _  // _` |  _/ _` / __|/ _ \|  _| __|   / /| | | || |\__, |
 | | \ \ (_| | || (_| \__ \ (_) | | | |_   / /_| |_| || |  / / 
 |_|  \_\__,_|_| \__,_|___/\___/|_|  \__| |____|\___/ |_| /_/  
                                                               
 
 PHP simple validation Library
 
 
 - Object and Array validation
 - $_FILES validation
 - Image validation
 - Chaining methods validation: $valid->name("age")->required()->range(100,200);
 - Domain and URL exist validation
 - Bad Words validation
 - Filtering methods
 - XSS Clean Data
 - Noise Words filtering
 - Type-casting/converts strings to int, float or bool(textual booleans)
*/

    
     
    class validation {
        
		public $data = array();//attach by reference an array to be validate
        public $errors = array();//array of errors generated by the different methods
		
		
		//patterns used for validate one input in with the function "pattern"
        public static $patterns = array(
            'querystring'   => '[A-Za-z0-9-\/_?&=]+',
            'url'           => '[A-Za-z0-9-:.\/_?&=#]+',
            'alpha'         => '[\p{L}]+',
            'words'         => '[\p{L}\s]+',
            'alphanum'      => '[\p{L}0-9]+',
            'int'           => '[0-9]+',
            'float'         => '[0-9\.,]+',
            'tel'           => '[0-9+\s()-]+',
            'text'          => '[\p{L}0-9\s-.,;:!"%&()?+\'°#\/@]+',
            'file'          => '[\p{L}\s0-9-_!%&()=\[\]#@,.;+]+\.[A-Za-z0-9]{2,4}',
            'folder'        => '[\p{L}\s0-9-_!%&()=\[\]#@,.;+]+',
            'address'       => '[\p{L}0-9\s.,()°-]+',
            'date_dmy'      => '[0-9]{1,2}\-[0-9]{1,2}\-[0-9]{4}',
            'date_ymd'      => '[0-9]{4}\-[0-9]{1,2}\-[0-9]{1,2}',
            'email'         => '[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+[.]+[a-z-A-Z]'
        );
		
		//definition of upload files error in PHP
        public $uploadFileError = array(
            0=> 'UPLOAD_OK',
            1=> 'UPLOAD_ERR_INI_SIZE: The uploaded file exceeds the upload_max_filesize directive',
            2=> 'UPLOAD_ERR_FORM_SIZE: The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form',
            3=> 'UPLOAD_ERR_PARTIAL: The uploaded file was only partially uploaded.',
            4=> 'UPLOAD_ERR_NO_FILE: No file was uploaded.',
            6=> 'UPLOAD_ERR_NO_TMP_DIR: Missing a temporary folder.',
            7=> 'UPLOAD_ERR_CANT_WRITE: Failed to write file to disk. ',
            8=> 'UPLOAD_ERR_EXTENSION: A PHP extension stopped the file upload.'
        );
		
		//basic tags allowed to filter an input in function "basicTags"
		public static $basicTags     = "<br><p><a><strong><b><i><em><img><blockquote><code><dd><dl><hr><h1><h2><h3><h4><h5><h6><label><ul><li><span><sub><sup>";
		
		//A noise word is a word such as the or if that is so common that it is not useful in searches.
		//all this words are removed for cleen an input. 
		private static $es_noiseWords = "de,la,que,el,en,y,a,los,del,se,las,por,un,para,con,no,una,su,al,lo,como,más,pero,sus,le,ya,o,este,sí,porque,esta,entre,cuando,muy,sin,sobre,también,me,hasta,hay,donde,quien,desde,todo,nos,durante,todos,uno,les,ni,contra,otros,ese,eso,ante,ellos,e,esto,mí,antes,algunos,qué,unos,yo,otro,otras,otra,él,tanto,esa,estos,mucho,quienes,nada,muchos,cual,poco,ella,estar,estas,algunas,algo,nosotros,mi,mis,tú,te,ti,tu,tus,ellas,nosotras,vosotros,vosotras,os,mío,mía,míos,mías,tuyo,tuya,tuyos,tuyas,suyo,suya,suyos,suyas,nuestro,nuestra,nuestros,nuestras,vuestro,vuestra,vuestros,vuestras,esos,esas,estoy,estás,está,estamos,estáis,están,esté,estés,estemos,estéis,estén,estaré,estarás,estará,estaremos,estaréis,estarán,estaría,estarías,estaríamos,estaríais,estarían,estaba,estabas,estábamos,estabais,estaban,estuve,estuviste,estuvo,estuvimos,estuvisteis,estuvieron,estuviera,estuvieras,estuviéramos,estuvierais,estuvieran,estuviese,estuvieses,estuviésemos,estuvieseis,estuviesen,estando,estado,estada,estados,estadas,estad,he,has,ha,hemos,habéis,han,haya,hayas,hayamos,hayáis,hayan,habré,habrás,habrá,habremos,habréis,habrán,habría,habrías,habríamos,habríais,habrían,había,habías,habíamos,habíais,habían,hube,hubiste,hubo,hubimos,hubisteis,hubieron,hubiera,hubieras,hubiéramos,hubierais,hubieran,hubiese,hubieses,hubiésemos,hubieseis,hubiesen,habiendo,habido,habida,habidos,habidas,soy,eres,es,somos,sois,son,sea,seas,seamos,seáis,sean,seré,serás,será,seremos,seréis,serán,sería,serías,seríamos,seríais,serían,era,eras,éramos,erais,eran,fui,fuiste,fue,fuimos,fuisteis,fueron,fuera,fueras,fuéramos,fuerais,fueran,fuese,fueses,fuésemos,fueseis,fuesen,siendo,sido,tengo,tienes,tiene,tenemos,tenéis,tienen,tenga,tengas,tengamos,tengáis,tengan,tendré,tendrás,tendrá,tendremos,tendréis,tendrán,tendría,tendrías,tendríamos,tendríais,tendrían,tenía,tenías,teníamos,teníais,tenían,tuve,tuviste,tuvo,tuvimos,tuvisteis,tuvieron,tuviera,tuvieras,tuviéramos,tuvierais,tuvieran,tuviese,tuvieses,tuviésemos,tuvieseis,tuviesen,teniendo,tenido,tenida,tenidos,tenidas,tened";

		// this list of words/expressions are for determine if input is safe and not contain javascript.
		// if one of them are found in the input are not valid
		public static $badwords_jsfunc = "url(,time2(,onbegin,if(,getelementbyid(,toprecision(,tofixed(,toexponential(,constructor(,alert(,tosource(,tostring(,valueof(,charat(,charcodeat(,concat(,indexof(,lastindexof(,localecompare(,length(,match(,replace(,search(,slice(,split(,substr(,substring(,tolocalelowercase(,tolocaleuppercase(,tolowercase(,touppercase(,anchor(,big(,blink(,bold(,fixed(,fontcolor(,fontsize(,italics(,link(,small(,strike(,sub(,sup(,every(,filter(,foreach(,join(,map(,pop(,push(,reduce(,reduceright(,reverse(,shift(,some(,sort(,splice(,unshift(,date(,getdate(,getday(,getfullyear(,gethours(,getmilliseconds(,getminutes(,getmonth(,getseconds(,gettime(,gettimezoneoffset(,getutcdate(,getutcday(,getutcfullyear(,getutchours(,getutcmilliseconds(,getutcminutes(,getutcmonth(,getutcseconds(,getyear(,setdate(,setfullyear(,sethours(,setmilliseconds(,setminutes(,setmonth(,setseconds(,settime(,setutcdate(,setutcfullyear(,setutchours(,setutcmilliseconds(,setutcminutes(,setutcmonth(,setutcseconds(,setyear(,todatestring(,togmtstring(,tolocaledatestring(,tolocaleformat(,tolocalestring(,tolocaletimestring(,totimestring(,toutcstring(,date.parse( ),date.utc( ),abs(,acos(,asin(,atan(,atan2(,ceil(,cos(,exp(,floor(,log(,max(,min(,pow(,random(,round(,sin(,sqrt(,tan(,exec(,test(,onerror,onhaschange,onload,onmessage,onoffline,ononline,onpagehide,onpageshow,onpopstate,onredo,onresize,onstorage,onundo,onunload,onblur,onchange,oncontextmenu,onfocus,onformchange,onforminput,oninput,oninvalid,onreset,onselect,onsubmit,onkeydown,onkeypress,onkeyup,onclick,ondblclick,ondrag,ondragend,ondragenter,ondragleave,ondragover,ondragstart,ondrop,onmousedown,onmousemove,onmouseout,onmouseover,onmouseup,onmousewheel,onscroll,onabort,oncanplay,oncanplaythrough,ondurationchange,onemptied,onended,onerror,onloadeddata,onloadedmetadata,onloadstart,onpause,onplay,onplaying,onprogress,onratechange,onreadystatechange,onseeked,onseeking,onstalled,onsuspend,ontimeupdate,onvolumechange,onwaiting"; 
		
		// this list of words/expressions are for determine if input is safe and not contain html.
		// if one of them are found in the input are not valid
		public static $badwords_html_tags = "detectflash,!--,-->,!doctype> ,a>,b>,i>,p>,q>,s>,u>,br>,dd>,dl>,dt>,em>,hr>,li>,ol>,rp>,rt>,td>,th>,tr>,tt>,ul>,bdi>,bdo>,big>,col>,del>,dfn>,dir>,div>,img>,ins>,kbd>,map>,nav>,pre>,sub>,sup>,var>,wbr>,abbr>,area>,base>,body>,cite>,code>,font>,form>,head>,html>,link>,main>,mark>,menu>,meta>,ruby>,samp>,span>,time>,aside>,audio>,embed>,frame>,input>,label>,meter>,param>,small>,style>,table>,tbody>,tfoot>,thead>,title>,track>,video>,applet>,button>,canvas>,center>,dialog>,figure>,footer>,header>,iframe>,keygen>,legend>,object>,option>,output>,script>,select>,source>,strike>,strong>,acronym>,address>,article>,caption>,details>,section>,summary>,basefont>,colgroup>,datalist>,fieldset>,frameset>,menuitem>,noframes>,noscript>,optgroup>,progress>,textarea>,blockquote>,figcaption>,h1> ,h2> ,h3> ,h4> ,h5> ,h6>,ilayer>,detectflash,<!--,--,<!doctype ,<a,<b,<i,<p,<q,<s,<u,<br,<dd,<dl,<dt,<em,<hr,<li,<ol,<rp,<rt,<td,<th,<tr,<tt,<ul,<bdi,<bdo,<big,<col,<del,<dfn,<dir,<div,<img,<ins,<kbd,<map,<nav,<pre,<sub,<sup,<var,<wbr,<abbr,<area,<base,<body,<cite,<code,<font,<form,<head,<html,<link,<main,<mark,<menu,<meta,<ruby,<samp,<span,<time,<aside,<audio,<embed,<frame,<input,<label,<meter,<param,<small,<style,<table,<tbody,<tfoot,<thead,<title,<track,<video,<applet,<button,<canvas,<center,<dialog,<figure,<footer,<header,<iframe,<keygen,<legend,<object,<option,<output,<script,<select,<source,<strike,<strong,<acronym,<address,<article,<caption,<details,<section,<summary,<basefont,<colgroup,<datalist,<fieldset,<frameset,<menuitem,<noframes,<noscript,<optgroup,<progress,<textarea,<blockquote,<figcaption,<h1 ,<h2 ,<h3 ,<h4 ,<h5 ,<h6,<ilayer";
		
		// this list of words/expressions are for determine if input is safe and not contain CSS.
		// if one of them are found in the input are not valid
		public static $badwords_css = "/*,*/,z-index,nav-up,tab-size,ime-mode,nav-down,nav-left,max-width,min-width,nav-index,nav-right,box-shadow,max-height,min-height,box-sizing,box-decoration-break,flex-flow,flex-grow,flex-wrap,word-wrap,font-size,mask-type,flex-basis,line-break,text-align,word-break,font-style,list-style,mark-after,rest-after,flex-shrink,line-height,text-indent,text-shadow,font-family,font-weight,mark-before,rest-before,text-justify,word-spacing,font-kerning,font-variant,font-stretch,text-overflow,flex-direction,text-transform,font-synthesis,text-align-last,text-decoration,list-style-type,font-size-adjust,text-orientation,list-style-image,page-break-after,font-variant-caps,page-break-before,page-break-inside,list-style-position,text-decoration-line,font-feature-setting,font-variant-numeric,text-decoration-color,text-decoration-style,font-variant-position,font-language-override,font-variant-ligatures,text-underline-position,font-variant-alternates,font-variant-east-asian,text-combine-horizontal,align-self,@font-face,voice-rate,align-items,white-space,empty-cells,break-after,voice-pitch,table-layout,break-before,break-inside,voice-stress,voice-volume,align-content,voice-balance,voice-duration,image-rendering,image-resolution,image-orientation,voice-pitch-range,@font-feature-values,border-top,margin-top,column-gap,object-fit,border-left,margin-left,column-fill,column-rule,column-span,border-color,border-image,border-right,border-style,border-width,margin-right,column-count,column-width,border-bottom,border-radius,margin-bottom,letter-spacing,border-spacing,border-collapse,object-position,border-top-color,border-top-style,border-top-width,border-left-color,border-left-style,border-left-width,column-rule-color,column-rule-style,column-rule-width,border-image-slice,border-image-width,border-right-color,border-right-style,border-right-width,border-bottom-color,border-bottom-style,border-bottom-width,border-image-outset,border-image-repeat,border-image-source,border-top-left-radius,border-top-right-radius,border-bottom-left-radius,border-bottom-right-radius,padding-top,padding-left,unicode-bidi,writing-mode,caption-side,padding-right,counter-reset,outline-color,outline-style,outline-width,marquee-speed,marquee-style,padding-bottom,outline-offset,justify-content,counter-increment,marquee-direction,marquee-play-count,hanging-punctuation,overflow-x,overflow-y,overflow-wrap,vertical-align,backface-visibility,animation-name,animation-delay,transform-style,transform-origin,animation-duration,animation-direction,animation-fill-mode,animation-play-state,animation-iteration-count,animation-timing-function,background-clip,background-size,background-color,background-image,transition-delay,background-repeat,background-origin,background-position,transition-property,transition-duration,background-attachment,transition-timing-function,perspective-origin";
		
		// this list of words/expressions are for determine if input is safe and not contain SQL.
		// if one of them are found in the input are not valid
		public static $badwords_sql = "alter table,create database,create table,create index,create view,drop database,drop index,drop table,group by,having,insert into,inner join,left join,right join,full join,order by,select *,select distinct,select into,select top,truncate table,union all,select ,insert ,delete ,update ,waitfor , delay,set ,from ,expr ,-->,<!--,0x0,0xf,</,convert(,char(,))";
		
		// this array is for convert/determine if a string is boolean
		public static $boolCastingList = 
		[
			"true"=>true,
			"yes"=>true,
			"ok"=>true,
			"si"=>true,
			"sí"=>true,
			"1"=>true,
			"false"=>false,
			"not"=>false,
			"no"=>false,
			"0"=>false
		];
        
		
		/**
		 * get the errors as string, one line per error		 
		 * 
		 * @access public
		 * @return string
		 * 
		 */
		public function __toString()
		{
			return implode(PHP_EOL,$this->errors);
		}
		
		/**
		 * try to avoid an Cross-site scripting (XSS) atack
		 * clean and sanitize all data array, eliminates html/php tags, converts special chars in html entities and normalice spaces to ascii space (32)
		 * 
		 * @access public
		 * @return void
		 * 
		 */
        public function xssCleanAllData()
		{
			if( is_array($this->data) )
			{
				foreach($this->data as $key => $val )
				{
					$val = filter_var(trim($val), FILTER_SANITIZE_STRING);
					$val = strip_tags($val);
					$val = htmlspecialchars($val, ENT_QUOTES, 'UTF-8');
					$val = preg_replace('/\s\s+/u', chr(32), $val);
					$this->data[$key] = $val;
				}
			}
			else
			{
				$this->xssClean();
			}
        }
		
		
		/**
		 * attach by reference an array, object or value to the class for validation
		 * be aware that if you modify the data will modify the original values. some functions filter, alter the original values too.
		 * 
		 * @access public
		 * @return void
		 * @param string $name
		 * @param bool $xssClean
		 */
        public function data(&$data,$xssClean = false)
		{			
			if(is_array ($data))
			{
				$this->data = &$data;
			}
			elseif(is_object($data))
			{
				foreach(get_object_vars($data) as $prop => $val)
				{
					$this->data[$prop] = &$data->$prop;
				}
			}
			else
			{
				$this->value = &$data;
			}
			
			if($xssClean)
			{
				$this->xssCleanAllData();
			}
			
            return $this;
        
        }
		
        /*
         * sets the name of the field we are validating, and if name match with some element in data array 
		 * or $_FILES, this value is going to be validate or filtered
         * 
		 * @access public
		 * @return this
         * @param string $name
         * 
         */
        public function name($name)
		{    
			$this->name = $name;
			unset($this->value);
			unset($this->file);
            
			
			if(array_key_exists($name,$this->data))
			{
				$this->value = &$this->data[$name];
			}
			
			if(array_key_exists($name,$_FILES))
			{
				$this->file = &$_FILES[$name];
			}
			
            return $this;        
        }
        
        /**
         * sets the value to be validate or filtered
         * 
		 * @access public
		 * @return this
         * @param mixed $value
         */
        public function value(&$value)
		{
            
            $this->value = &$value;
            return $this;
        
        }
		
        /**
         * reset errors, is useful after some validations like:  $valid->name("productId")->required()->isSuccess() and you need re evaluate
         * 
		 * @access public
		 * @return this
         * @param mixed $value
         */
        public function reset()
		{            
            $this->errors = [];
            return $this;        
        }
        
        /**
         * function were all errors are set, also you can add a new error
		 * 
         * 
		 * @access public
		 * @return this
         * @param string $message
		 * @param string $value
		 * @param string $function

         */
        public function errorMessage($message="",$function="")
		{          
			$message = $this->name . ": " . $message;
			
			if($function!="")
			{
				$message = $message . " [".$function."]";
			}
			
			$this->errors[] = $message;
			
            return $message;        
        }
        
        /*
         * check before use value or file is is set
         * 
		 * @access public
		 * @return this
         * @param string $name
         * 
         */
        private function isValueDefined($function,$forFile=false)
		{  
			$fileValue = null;
			$fieldValue = null;
			
			if(array_key_exists("file",$this))
			{
				$fileValue = $this->file;
			}
			if(array_key_exists("value",$this))
			{
				$fieldValue = $this->value;
			}
			
			
			if($forFile)
			{	
				if($fileValue === null)
				{
					$this->errorMessage("error in RULE not defined file to validate check 'name()' in validations or set file manualy using 'file()' method.",$function); 
					return false;
				}
				
			}
			else
			{				
				if($fieldValue === null)
				{
					$this->errorMessage("error in RULE not defined value to validate, check 'name()' in validations or set value manualy using 'value()' method.",$function); 
					return false;
				}
			}
			return true;
        }
		
        /**
         * sets the File element to be validate or filtered
		 * the value is one elemet of array $_FILES
         * 
		 * @access public
		 * @return this
         * @param mixed $value
         */
        public function file($file)
		{            
            $this->file = $file;
            return $this;        
        }
		
        /**
         * check if some required parameter is present otherwise the field is not valid
         * 
		 * @access public
		 * @return this
         */
        public function required()
		{			
            if(isset($this->file))
			{
				if($this->file['error'] != 0)
				{
					$this->errorMessage("value is required. ".$this->uploadFileError[$this->file['error']],__FUNCTION__); 
				}                
            }
			elseif(!isset($this->value))
			{
				$this->errorMessage("value is required.",__FUNCTION__);
			}
			elseif($this->value === "")
			{
				$this->errorMessage("value is required.",__FUNCTION__);
			}
      
            return $this;
        }
		
        /**
         * determines if a input string is valid if pass regex, the regex used is an element of array $patterns         
         * 
		 * @access public
		 * @return this
         * @param string $name key of pattern array
         */
        public function pattern($name)
		{
            
            if($name == 'array')
			{
                
                if(!is_array($this->value))
				{
					$this->errorMessage("Not valid, Cannot be array.",__FUNCTION__);                    
                }
            
            }else{
            
                $regex = '/^('.self::$patterns[$name].')$/u';
                if($this->value != '' && !preg_match($regex, $this->value)){
					$this->errorMessage("Not valid format. $name",__FUNCTION__);                    
                }
                
            }
			
            return $this;
            
        }
		
        /**
         * determines if a input string is valid if pass regex, the regex used is an element of array $patterns         
         * but in these case are used internally for some functions
		 * 
		 * @access public
		 * @return this
         * @param string $name key of pattern array
         */
        private function patternCheck($name,$value)
		{
            
			$regex = '/^('.self::$patterns[$name].')$/u';
			
			if($value != '' && !preg_match($regex, $value))
			{
				return false;
			}
            return true;
            
        }
        
        /**
         * determines if a input string is valid if pass regex, the regex to evaluate are sended as parameter in "$pattern"
         * 
		 * @access public
		 * @return this
         * @param string $pattern         
         */
        public function customPattern($pattern)
		{
            
            $regex = '/^('.$pattern.')$/u';
            if($this->value != '' && !preg_match($regex, $this->value))
			{
				$this->errorMessage("Not valid format.",__FUNCTION__);
            }
            return $this;
            
        }
        

        
        /**
         * Determine if the provided numeric value is higher or equal to a specific value 
         * 
		 * @access public
		 * @return this
         * @param int $minVal
         */
        public function min($minVal)
		{            
			$val = floatval($this->value);
			
			if($val < $minVal)
			{				
				$this->errorMessage("Is less than $minVal.",__FUNCTION__);
			}
			
            return $this;
            
        }
		

            
        /**
         * Determine if the provided numeric value is lower or equal to a specific value
         * 
		 * @access public
		 * @return this
         * @param int $maxVal
         */
        public function max($maxVal)
		{
            $val = floatval($this->value);
			
			if($val  > $maxVal)
			{
				$this->errorMessage("Is more than $maxVal.",__FUNCTION__);				
			}
			
            return $this;
            
        }
		
        /**
         * Determine if the provided numeric value is between  a specific range
         * 
		 * @access public
		 * @return this
         * @param int $maxVal
         */
        public function range($min,$max)
		{
            $val = floatval($this->value);
			
			if($val  < $min || $val  > $max)
			{	
				$this->errorMessage("Is not in the range $min-$max.",__FUNCTION__);
			}
			
            return $this;
            
        }
		
        /**
         * Determine if the provided string length is more or equal to a specific value
         * 
		 * @access public
		 * @return this
         * @param int $length
         */
        public function minLen($length)
		{
            
            if(is_string($this->value))
			{
                
                if(strlen($this->value) < $length)
				{                    
					$this->errorMessage("Length is less than $length.",__FUNCTION__);
                }           
            }
			else
			{
				$this->errorMessage("Is not string.",__FUNCTION__);				
			}
			
            return $this;
            
        }
		
        /**
         * Determine if the provided string length is lower or equal to a specific value
         * 
		 * @access public
		 * @return this
         * @param int $length
         */
        public function maxLen($length)
		{
            
            if(is_string($this->value))
			{                
                if(strlen($this->value) > $length)
				{
					$this->errorMessage("Length is more than $length.",__FUNCTION__);                    
                }
            }
			else
			{			
				$this->errorMessage("Is not string.",__FUNCTION__);
			}
            return $this;
            
        }
		
        /**
         * Determine if the provided string length is between  a specific range
         * 
		 * @access public
		 * @return this
         * @param int $min
		 * @param int $max
         */
        public function rangeLen($min,$max)
		{            
            if(is_string($this->value))
			{                
                if(strlen($this->value) < $min || strlen($this->value) > $max)
				{
					$this->errorMessage("Length is not in the range $min-$max.",__FUNCTION__);                    
                }
            }
			else
			{			
				$this->errorMessage("Is not string.",__FUNCTION__);
			}
            return $this;            
        }
		
        /**
         * Determine if the provided string length is equal to a specific value
         * 
		 * @access public
		 * @return this
         * @param int $length
         */
        public function exactLen($length)
		{
            
            if(is_string($this->value))
			{                
                if(strlen($this->value) != $length)
				{
					$this->errorMessage("Length is not equal than $length.",__FUNCTION__);                    
                }           
            }
			else
			{
				$this->errorMessage("Is not string.",__FUNCTION__);
			}
            return $this;
            
        }
		
        /**
         * Determine if the provided string has space separated words and the counted words are lower or equal to a specific value
         * 
		 * @access public
		 * @return this
         * @param int $num
		 * @param int $delimiter
         */
        public function maxWords($num,$delimiter= " ")
		{
            
            if(is_string($this->value))
			{                
                if($this->countWords($this->value,$delimiter) > $num)
				{
					$this->errorMessage("has more words than the $num allowed.",__FUNCTION__);
                }
           
            }
			else
			{
				$this->errorMessage("Is not string.",__FUNCTION__);
			}
            return $this;
            
        }
		
        /**
         * Determine if the provided string has space separated words and the counted words are more or equal to a specific value
         * 
		 * @access public
		 * @return this
         * @param int $num
		 * @param int $delimiter
         */
        public function minWords($num,$delimiter= " ")
		{
            
            if(is_string($this->value))
			{                
                if($this->countWords($this->value,$delimiter) < $num)
				{
  					$this->errorMessage("has less words than the $num allowed.",__FUNCTION__);
                }
           
            }
			else
			{
				$this->errorMessage("Is not string.",__FUNCTION__);
			}
            return $this;
            
        }
		
        /**
         * Determine if the provided string has delimiter separated words and the counted words are exact to specific number
         * 
		 * @access public
		 * @return this
         * @param int $num
		 * @param int $delimiter
         */
        public function exactWords($num,$delimiter= " ")
		{
            
            if(is_string($this->value))
			{
                if($this->countWords($this->value,$delimiter) != $num)
				{
  					$this->errorMessage("the number of words are not the expected ($num)",__FUNCTION__);
                }           
            }
			else
			{
				$this->errorMessage("Is not string.",__FUNCTION__);
			}
            return $this;
            
        }
		
        /**
         * Determine if the provided string has space separated words and the counted words are is between a specific range
         * 
		 * @access public
		 * @return this
         * @param int $min
		 * @param int $max
		 * @param int $delimiter
         */
        public function rangeWords($min,$max,$delimiter= " ")
		{            
            if(is_string($this->value))
			{   
				$count = $this->countWords($this->value,$delimiter);
                if($count < $min || $count > $max)
				{
  					$this->errorMessage("counted words are not in the range $min-$max.",__FUNCTION__);
                }
           
            }
			else
			{
				$this->errorMessage("Is not string.",__FUNCTION__);
			}
            return $this;           
        }
        
        /**
         * Determine if the provided value is equal than the specified value
		 * @access public
		 * @return this
         * @param mixed $value
         */
        public function equal($value)
		{
        
            if($this->value != $value)
			{
				$this->errorMessage("It is not the same as expected",__FUNCTION__);
            }
            return $this;
            
        }
		
        /**
         * Determine if the provided string begins with one of specified element of list.
		 * the list is comma separated string
		 *
		 * @access public
		 * @return this
         * @param string $list
         */
        public function beginsWith($list)
		{
			$list = explode(",",trim($list));
			
			$found = false;
			foreach($list as $item)
			{
				$item = trim($item);				
				
				if (strpos($this->value, $item) === 0)
				{
					$found = true;
				}
			}			

            if(!$found)
			{
				$this->errorMessage("Not begins with the predefined values",__FUNCTION__);
            }
			
            return $this;
            
        }
        
        /**
         * Determine if the provided string contains one of specified element of list.
		 * the list is comma separated string
		 *
		 * @access public
		 * @return this
         * @param string $list
         */
        public function contains($list)
		{
			
			$value = trim(strtolower($this->value));
        	$list = explode(",",trim(strtolower($list)));
			
			$found = false;
			foreach($list as $item)
			{				
				if(strpos($value,trim($item)) !== false)
				{
					$found = true;
				}
			}
			
        
            if(!$found)
			{
				$this->errorMessage("Not contains one of the predefined values",__FUNCTION__);
            }
			
            return $this;
            
        }
		
        /**
         * Determine if the provided string NOT contains one of specified element of list.
		 * the list is comma separated string
		 *
		 * @access public
		 * @return this
         * @param string $list
         */
        public function notContains($list)
		{
			
			$value = trim(strtolower($this->value));
        	$list = explode(",",trim(strtolower($list)));
			
			$found = false;
			foreach($list as $item)
			{				
				if(strpos($value,trim($item)) !== false)
				{
					$found = true;
				}
			}
			
        
            if($found)
			{
				$this->errorMessage("Contains not allowed values",__FUNCTION__);
            }
			
            return $this;
            
        }
		
		
        /**
         * Determines if the uploaded file is less or equal than the specified max file size
		 * in bytes
		 *
		 * @access public
		 * @return this
         * @param int $size
         */
        public function maxSize($size)
		{            
			
			if($this->file['error'] == 0)
			{
				if( $this->file['size'] > $size)
				{
					$this->errorMessage("Exceeds the maximum size allowed of ".number_format($size / 1048576, 2).' MB.',__FUNCTION__);					
				}				
			}
			else
			{
				$this->errorMessage($this->uploadFileError[$this->file['error']],__FUNCTION__);
			}

            return $this;
            
        }
		
        /**
         * Determines if the uploaded file is more or equal than the specified min file size
		 * in bytes
		 *
		 * @access public
		 * @return this
         * @param int $size
         */
        public function minSize($size)
		{            
			
			if($this->file['error'] == 0)
			{
				if( $this->file['size'] < $size)
				{
					$this->errorMessage("Exceeds the minimum size allowed of ".number_format($size / 1048576, 2).' MB.',__FUNCTION__);
				}				
			}
			else
			{
				$this->errorMessage($this->uploadFileError[$this->file['error']],__FUNCTION__);
			}

            return $this;
            
        }
		
		
        /**
         * Determines if the uploaded file is between than the specified range file size
		 * in bytes
		 *
		 * @access public
		 * @return this
         * @param int $min
		 * @param int $max
         */
        public function rangeSize($min, $max)
		{            
			
			if($this->file['error'] == 0)
			{
				if( $this->file['size'] < $min || $this->file['size'] > $max)
				{
					$this->errorMessage("Exceeds the range size allowed of ".number_format($min / 1048576, 2)."-".number_format($max / 1048576, 2) .' MB.',__FUNCTION__);
				}				
			}
			else
			{
				$this->errorMessage($this->uploadFileError[$this->file['error']],__FUNCTION__);
			}

            return $this;
            
        }
		
        /**
         * Determines the file mime type(finfo_open and finfo_file) and checks if is allowed in the list.
		 * the list is comma separated string, 
		 * the list must contain the mime type strings complete or partial.
		 *
		 * @access public
		 * @return this
         * @param int $list
         */
        public function validMime($list)
		{
            
			$file = $this->file;
        	$list = explode(",",trim(strtolower($list)));
			
			if(!file_exists($file['tmp_name']))
			{
				$this->errorMessage("File send not exist.",__FUNCTION__);
				return $this;
			}
			
			$finfo = finfo_open( FILEINFO_MIME_TYPE );
			$mtype = trim(strtolower(finfo_file( $finfo, $file['tmp_name'] )));
			finfo_close( $finfo );
			
			
			$found = false;
			foreach($list as $item)
			{
				if(strpos($mtype,trim($item)) !== false)
				{
					$found = true;
				}
			}			
        
            if(!$found)
			{
				$this->errorMessage("The file not match with the allowed mime types.",__FUNCTION__);                
            }
			
            return $this;
        }
		
		
		
        /**
         * Determines the file is image, checks extension vs mime type, max-min dimensions one or both, max-min file size one or both
		 *
		 * @access public
		 * @return this
         * @param string $extList
		 * @param string $minDimensions
		 * @param string $maxDimensions
		 * @param string $minSize
		 * @param string $maxSize
         */
        public function validImage($extList= "",$minDimensions= "",$maxDimensions= "",$minSize=null,$maxSize=null)
		{
			//check upload file error
            if( $this->file['error'] != 0 )
			{
				$this->errorMessage($this->uploadFileError[$this->file['error']],__FUNCTION__);
				return $this;
            }
			
			if($minSize!= null)
			{
				if( $this->file['size'] < $minSize)
				{
					$this->errorMessage("Exceeds the minimum size allowed of ".number_format($minSize / 1048576, 2).' MB.',__FUNCTION__);
					return $this;
				}			
			}
			if($maxSize!= null)
			{
				if( $this->file['size'] > $maxSize)
				{
					$this->errorMessage("Exceeds the maximum size allowed of ".number_format($maxSize / 1048576, 2).' MB.',__FUNCTION__);
					return $this;
				}				
			}


			
			$minDimensions = explode("x",trim(strtolower($minDimensions)));
			if(count($minDimensions) >= 2)
			{
				$minDimensions[0] = intval($minDimensions[0]);
				$minDimensions[1] = intval($minDimensions[1]);
			}
			else
			{
				$minDimensions= null;
			}
			
			$maxDimensions = explode("x",trim(strtolower($maxDimensions)));
			
			if(count($maxDimensions) >= 2)
			{
				$maxDimensions[0] = intval($maxDimensions[0]);
				$maxDimensions[1] = intval($maxDimensions[1]);
			}
			else
			{
				$maxDimensions= null;
			}
			
			$imgFile = $this->file['tmp_name'];
			//check image file format
			if (file_exists($imgFile))
			{
				$imagesizedata = getimagesize($imgFile);
				
				if ($imagesizedata === false)//not is image
				{
					$this->errorMessage("File is not image.",__FUNCTION__);
				}
				else//is image
				{	
					//check file extension						
					
					$fileExt = strtolower(pathinfo($this->file['name'], PATHINFO_EXTENSION));
					$fileExt2 = strtolower(image_type_to_extension($imagesizedata[2],false));

					$known_replacements = array(
							'jpeg' => 'jpg',
							'tiff' => 'tif',
					);
					
					$fileExt2 = str_replace(array_keys($known_replacements), array_values($known_replacements), $fileExt2);					

					
					if($fileExt != $fileExt2)
					{
						$this->errorMessage("The file has different extension type in the file name ('$fileExt'-'$fileExt2')",__FUNCTION__);
						return $this;	
					}

					if($extList != "")
					{
						$extList = explode(",",trim(strtolower($extList)));
						$found = false;
						foreach($extList as $item)
						{				
							if( $fileExt == trim($item) )
							{
								$found = true;
							}
						}
						
						if(!$found)
						{
							$this->errorMessage("The file not match with the allowed extension.",__FUNCTION__);
							return $this;
						}
						
					}
					
					
					$fileExtW = $imagesizedata[0];
					$fileExtH = $imagesizedata[1];
					
					if($minDimensions != null)
					{
						if( $fileExtW < $minDimensions[0] || $fileExtH < $minDimensions[1])
						{
							$this->errorMessage("image dimension are less than the allowed ($minDimensions[0]x$minDimensions[1])",__FUNCTION__);
							return $this;
						}
					}
					if($maxDimensions != null)
					{
						if( $fileExtW > $maxDimensions[0] || $fileExtH > $maxDimensions[1])
						{
							$this->errorMessage("image dimension are more than the allowed ($maxDimensions[0]x$maxDimensions[1])",__FUNCTION__);
							return $this;
						}
					}
					

				}
			}
			else
			{
				$this->errorMessage("File send not exist.",__FUNCTION__);
			}
			
            return $this;
        }
		
        /**
         * Determines if the extension in the name of file is allowed in the provided list 
         *
		 * @access public
		 * @return this
         * @param string $extension
         */
        public function ext($list)
		{
			
			$file = $this->file;
        	$list = explode(",",trim(strtolower($list)));			
			

            if( $this->file['error'] != 0 )
			{
				$this->errorMessage($this->uploadFileError[$this->file['error']],__FUNCTION__);
				return $this;
            }

			$fileExt = strtolower(pathinfo($this->file['name'], PATHINFO_EXTENSION));
			
			$found = false;
			foreach($list as $item)
			{				
				if( $fileExt == trim($item) )
				{
					$found = true;
				}
			}
			
            if(!$found)
			{
				$this->errorMessage("The file not match with the allowed extension.",__FUNCTION__);
            }
			
            return $this;
            
        }
        
		
		/*
					  URI, URL
		_____________________________________

							 URI
				 ___________________________

									URI, URN
								   _________  

		 scheme        host          path
		________ _________________ _________
		https://www.wikipedia.org/index.html
		*/
		
        /**
         * Determines if an URL exist getting the content and verifying if has no error, http code examples test in https://httpstat.us/
         *
		 * @access public
		 * @return this
		 * @param string $AcceptedHttpCodes
         */
        public function urlExists($AcceptedHttpCodes ="")
		{
			$url = strtolower($this->value);
			
			$handle = curl_init();
			curl_setopt($handle, CURLOPT_URL, $url);
			curl_setopt($handle, CURLOPT_RETURNTRANSFER, 1);
			curl_exec($handle);
		    $status = curl_getinfo($handle);
			
			$AcceptedHttpCodes = explode(",",$AcceptedHttpCodes);
			$AcceptedHttpCodes[] = 200;


			if ($handle !== false && $status !== false)
			{	
				$http_code = $status["http_code"];
				
				if(!in_array ($status["http_code"],$AcceptedHttpCodes))
				{
					$this->errorMessage("The URL apparently not exist, or the site is down.(http code $http_code)",__FUNCTION__);
				}
			}
			
			curl_close($handle);
			
			return $this;
        }
		
        /**
         * Determines if an Domain exist
         *
		 * @access public
		 * @return this
         */
        public function domainExists()
		{
			
			$url = strtolower($this->value);			
			
			if(strpos($url ,"://") === false )
			{
				$url = "http://".$url;
			}
			
	 		$url = parse_url($url);

			if (isset($url['host'])) {
				$url = $url['host'];
			}

			if (function_exists('checkdnsrr')  && function_exists('idn_to_ascii'))
			{
				if (checkdnsrr(idn_to_ascii($url), 'A') === false)
				{					
					$this->errorMessage("The Domain apparently not exist, or is down.",__FUNCTION__);
				}
			} 
			else
			{
				if (gethostbyname($url) == $url)
				{
					$this->errorMessage("The Domain apparently not exist, or is down.",__FUNCTION__);
				}
			}
			
			return $this;
        }

        /**
         * Determine if the provided value is a valid IP address
         *
		 * @access public
		 * @return this
         */
        public function validIp()
		{

			if (!filter_var($this->value, FILTER_VALIDATE_IP) !== false)
			{
				$this->errorMessage("Is not valid IP.",__FUNCTION__);				
			}
            return $this;
            
        }
		
        /**
         * Determine if the provided value is a valid IPv4 address
         *
		 * @access public
		 * @return this
         */
        public function validIpv4()
		{

			if (!filter_var($this->value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4))
			{
				$this->errorMessage("Is not valid IP v4.",__FUNCTION__);
			}
            return $this;
            
        }
        
        /**
         * Determine if the provided value is a valid IPv6 address
         *
		 * @access public
		 * @return this
         */
        public function validIpv6()
		{

			if (!filter_var($this->value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) 
			{
				$this->errorMessage("Is not valid IP v6.",__FUNCTION__);
			}
            return $this;
            
        }
		
		
        /**
         * Determine if the input is a valid human name
         *
		 * @access public
		 * @return this
         */		
        public function validName()
		{

			if (!preg_match("/^([a-z \p{L} '-])+$/iu", $this->value) !== false)
			{
				$this->errorMessage("Is not valid human name",__FUNCTION__);
			}
            return $this;
            
        }
		
		
        /**
         * Determine if the provided input is a valid date (ISO 8601)
         *
		 * @access public
		 * @return this
		 * @param string $format date ('Y-m-d') or datetime ('Y-m-d H:i:s')
         */	
        public function validDate($format = null)
		{
			if (!$this->isValueDefined(__FUNCTION__)){return;}
			
			// Default
			if ($format == null)
			{
				$cdate1 = date('Y-m-d', strtotime($this->value));
				$cdate2 = date('Y-m-d H:i:s', strtotime($this->value));

				if ($cdate1 != $this->value && $cdate2 != $this->value)
				{
					$this->errorMessage("Is not valid date format Y-m-d or Y-m-d H:i:s",__FUNCTION__);					
				}
			} 
			else
			{
				$date = \DateTime::createFromFormat($format, $this->value);

				if ($date === false || $this->value != date($format, $date->getTimestamp()))
				{
					$this->errorMessage("Is not valid date format $format",__FUNCTION__);					
				}
			}
            return $this;            
        }
		
        /**
         * determines if string contains not allowed words
		 * the list of badwords ara taken from arrays: $badwords_jsfunc, $badwords_html_tags, $badwords_css and $badwords_sql
         *
		 * @access public
		 * @return this
		 * @param string $filter eg. "js,html,css,sql" of just "js,html"
         */	
		public function badwords($filter = "")
		{
			$text = trim($this->value);		
			$filter = strtolower($filter);

			//Remove spaces between keys, brackets and symbols
			$text = preg_replace("/"."\s+\<"."/","<",$text);
			$text = preg_replace("/"."\<\s+"."/","<",$text);

			$text = preg_replace("/"."\s+\>"."/",">",$text);
			$text = preg_replace("/"."\>\s+"."/",">",$text);

			$text = preg_replace("/"."\s+\("."/","(",$text);
			$text = preg_replace("/"."\(\s+"."/","(",$text);

			$text = preg_replace("/"."\s+\)"."/",")",$text);
			$text = preg_replace("/"."\)\s+"."/",")",$text);

			$text = preg_replace("/"."\s+\{"."/","{",$text);
			$text = preg_replace("/"."\{\s+"."/","{",$text);

			$text = preg_replace("/"."\s+\}"."/","}",$text);
			$text = preg_replace("/"."\}\s+"."/","}",$text);

			$text = preg_replace("/"."\s+\["."/","[",$text);
			$text = preg_replace("/"."\[\s+"."/","[",$text);

			$text = preg_replace("/"."\s+\]"."/","]",$text);
			$text = preg_replace("/"."\]\s+"."/","]",$text);

			$text = preg_replace("/"."\s+\+"."/","+",$text);
			$text = preg_replace("/"."\+\s+"."/","+",$text);

			$text = preg_replace("/"."\s+\-"."/","-",$text);
			$text = preg_replace("/"."\-\s+"."/","-",$text);


			$badwords_list1=[];
			$badwords_list2=[];
			$badwords_list3=[];
			$badwords_list4=[];


			if (strpos($filter, 'js') !== false)
			{
				$badwords_list1= explode(",",self::$badwords_jsfunc);
			}

			if (strpos($filter, 'html') !== false )
			{
				$badwords_list2= explode(",",self::$badwords_html_tags);
			}

			if (strpos($filter, 'css') !== false )
			{
				$badwords_list3= explode(",",self::$badwords_css);
			}

			if (strpos($filter, 'sql') !== false )
			{
				$badwords_list4= explode(",",self::$badwords_sql);
			}


			if ($filter == "" || $filter == "all")
			{
				$badwords_list1= explode(",",self::$badwords_jsfunc);
				$badwords_list2= explode(",",self::$badwords_html_tags);
				$badwords_list3= explode(",",self::$badwords_css);
				$badwords_list4= explode(",",self::$badwords_sql);
			}



			$ok = true;
			$badw = "";


			if($ok)
			{
				foreach($badwords_list1 as $bad) {
					if(strpos($text,trim($bad)) !== false)
					{
						$badw = $bad;
						$ok = false;
						break;
					}
				}
			}


			if($ok)
			{
				foreach($badwords_list2 as $bad) {
					if(strpos($text,trim($bad)) !== false)
					{
						$badw = $bad;
						$ok = false;
						break;
					}
				}
			}
			
			if($ok)
			{
				foreach($badwords_list3 as $bad) {
					if(strpos($text,trim($bad)) !== false)
					{
						$badw = $bad;
						$ok = false;
						break;
					}
				}
			}

			if($ok)
			{
				foreach($badwords_list4 as $bad) {
					if(strpos($text,trim($bad)) !== false)
					{
						$badw = $bad;
						$ok = false;
						break;
					}
				}
			}

			if (!$ok)
			{
				if(strlen($badw) > 6)
				{
					$badw = substr($badw,0,6)."...";
				}				
				
				$this->errorMessage("Is not valid contains bad word = '".htmlspecialchars($badw)."'.    ",__FUNCTION__);
			}
	
			return $this;
		}
		
		
        /**
         * Tries to determine if the provided value not contain patterns like:
		 * repetitive chars, repetitive patterns, Ascending numbers, descendant numbers, qwerty patterns
         *
		 * @access public
		 * @return this
         */	
		public function textPatterns($maxpercentPatterns = 60)
		{
			//$maxpercentPatterns = 60;//max percent of string of Repetitive char/patterns (100% = string length)
				
			
			$text = trim($this->value);		
			$errtxt ="";
			$ok = true;

			//validating that they are not the same characters ex: 111111, 22222222, 33333

			//if they repeat more than 83% of the characters (100 / 1.2 = 83.33%)
			//eg: text = 150 characters the 83.3% is 125 if they repeat more than 125 characters then it will send an error of repeated characters
			foreach (count_chars($text, 1) as $char => $count)
			{	
				if( (($count*100)/strlen($text)) > $maxpercentPatterns)
				{
					$errtxt = "Too many repeated characters (".$count."x".chr($char).")";
					$ok = false; //too many repeated characters
				}		   
			}

			//validating that there are no repetitive patterns   ej:123123, aaabbbccc, asdasdasd, qweqweqwe

			$most_repeated_pattern = $this->lookForPatterns($text);			


			if(count($most_repeated_pattern) > 0)
			{				
				foreach($most_repeated_pattern as $key=>$value) 
				{
					$pattern = $key;
					$repeated_times =$value;
				}
				
				if(strlen($pattern) > 0)
				{
					$number_pieces =  strlen($text) / strlen($pattern);
					$percentage_patterns = ($repeated_times *100) / $number_pieces;
				}
				else					
				{
					$percentage_patterns =0;
				}


				if($percentage_patterns > $maxpercentPatterns)
				{
					if(strlen($pattern) > 6)
					{
						$pattern = substr($pattern,0,6)."...";
					}
					$errtxt = "There is more than $maxpercentPatterns% of repeated patterns in the text (" . $pattern . ")";
					$ok = false; //too many repeated patterns
				}
			}


			//validate that there are no consecutive characters eg: 12345679, abcdefg, opqrstuvw

			$occurrence_counter =0;
			$max_occurrence = 0;
			$sequence = "";


			//We verify consecutive Ascending ASCII chars


			for($i=0;$i<strlen($text)-2;$i++) //we go through the text character by character minus 2
			{
				if ( ord(substr($text,$i,1)) == ord(substr($text,$i+1,1)) - 1 )
				{
					$occurrence_counter++;

					if($occurrence_counter > $max_occurrence)
					{
						$max_occurrence = $occurrence_counter;
						$sequence .=  substr($text,$i,1);
					}
				}
				else
				{
					$occurrence_counter = 0;
				}

			}


			//We verify consecutive descendant ASCII chars

			for($i=0;$i<strlen($text)-2;$i++) //we go through the text character by character minus 2
			{
				if ( ord(substr($text,$i,1)) == ord(substr($text,$i+1,1)) + 1 )
				{
					$occurrence_counter++;

					if($occurrence_counter > $max_occurrence)
					{
						$max_occurrence = $occurrence_counter;
						$sequence .=  substr($text,$i,1);
					}
				}
				else
				{
					$occurrence_counter = 0;
				}

			}


			if(  ((strlen($sequence)*100)/strlen($text)) > $maxpercentPatterns )
			{
				if(strlen($sequence) > 6)
				{
					$sequence = substr($sequence,0,6)."...";
				}
				$errtxt = "There are more than $maxpercentPatterns% of consecutive patterns (" . $sequence . ")";
				$ok = false; //too many repeated patterns			
			}


			//validate that there are no qwerty patterns

			$keyboard_patterns = 'qwertyuiop´+asdfghjklñ{}zxcvbnm,.-!\"#$%&/()=?¡+´poiuytrewq}{ñlkjhgfdsa-.,mnbvcxz¡?=)(/&%$#"!/*-++-*/7894561230.95175374108520963.741852963369258147.36902580147357159.0321654987/*-++-*/12345678900987654321';

			$most_repeated_keyboard_pattern = $this->lookForPatterns($keyboard_patterns, $text);

			if(count($most_repeated_keyboard_pattern) > 0)
			{
				foreach($most_repeated_keyboard_pattern as $key=>$value) 
				{
					$pattern = $key;
					$repeated_times =$value;
				} 
				
				$patternsLen =strlen($pattern) * $repeated_times;
				
				if( (($patternsLen*100)/strlen($text)) > $maxpercentPatterns) 
				{
					if(strlen($pattern) > 6)
					{
						$pattern = substr($pattern,0,6)."...";
					}
					$errtxt = "There are QWERTY keyboard patterns (" . $pattern . ")";
					$ok = false; //too many repeated patterns
				}

			}



			if (!$ok)
			{
				$this->errorMessage("the text contains patterns. $errtxt",__FUNCTION__);
			}


			return $this;

		}//EOF
		
		
		
        /**
         * internal fuction to determine some patterns
         * divide into pieces of the pattern text and search for them in Haystack_text,
		 * si no existe el Haystack_text saca y busca los patrones de pattern_text
		 * 
		 * @access public
		 * @return this
		 * @param string $pattern_text //string with the patterns for search in Haystack_text
		 * @param string $Haystack_text // text where we going to find patterns
         */	
		private function lookForPatterns($pattern_text,$Haystack_text = "")
		{
			if ($Haystack_text == "")
			{
				$Haystack_text = $pattern_text;
			}

			$pattern_data = array();
			$most_repeated_pattern="";
			$number_of_repetitions = 0;

			//we cut into fragments of 5 to 15 characters the pattern_text
			//e.g: abcdefghijklmnño
			//    abcdef
			//    abcdefg
			//    abcdefgh
			//    abcdefghi
			//    abcdefghij
			//    abcdefghijk...

			for ($size =5; $size < 15; $size++)
			{
				if($size < strlen($pattern_text))
				{
					for($i=0;$i<strlen($pattern_text);$i+=$size)
					{
						$pattern="";
						$count_occurrences =0;

						if($i + $size < strlen($pattern_text))
						{
							$pattern = substr($pattern_text,$i,$size);
						}
						else
						{
							$pattern = substr($pattern_text,-$size);
						}

						//we calculate how many times each fragment appears
						$count_occurrences = substr_count($Haystack_text,$pattern);
						

						$total_pattern_Length = strlen($pattern)*$count_occurrences;
						$total_most_repeated_pattern_Length = strlen($most_repeated_pattern)*$number_of_repetitions;
						
						
						//if a fragment is bigger  we keep the number of times and the fragment that appears
						if($total_most_repeated_pattern_Length <= $total_pattern_Length)
						{	
							$number_of_repetitions = $count_occurrences;
							$most_repeated_pattern = $pattern;
						}

					}
				}
			}

			//we keep in an array the most localized and how many times it appeared and we returned it in the function
			//if no pattern is found, an empty string and a zero are returned
			$pattern_data[$most_repeated_pattern] = $number_of_repetitions;



			return $pattern_data;
		}

       /**
         * internal function to count space separated words in a string
		 * 
		 * @access public
		 * @return this
		 * @param string $text
		 * @param string $delimiter
		 */	
		private function countWords($text,$delimiter= " ")
		{


			$count_words =0;

			if($delimiter == " ")
			{
				$text = preg_replace("/\s+/"," ",$text); //normalize the spaces
			}			

			foreach(explode($delimiter,$text) as $word)
			{
				if( strlen(trim($word)) != "" )
				{
					$count_words++; //count only the words
				} 
			}		

			return $count_words;
		}
	
		
		
        /**
		 * try to avoid an Cross-site scripting (XSS) atack filtering the value
		 * clean and sanitize the value, eliminates html/php tags, converts special chars in html entities and normalice spaces to ascii space (32)
         *
		 * @access public
		 * @return this
         */
        public function xssClean()
		{
			$this->value = filter_var(trim($this->value), FILTER_SANITIZE_STRING);
			$this->value = strip_tags($this->value);
			$this->value = htmlspecialchars($this->value, ENT_QUOTES, 'UTF-8');
			$this->value = preg_replace('/\s\s+/u', chr(32), $this->value);
			
			return $this;
        }
		
        /**
		 * Strip whitespace (or other characters) from the beginning and end of a string value
         *
		 * @access public
		 * @return this
         */
        public function trim()
		{
			$this->value = trim($this->value);
			return $this;
        }
		
        /**
		 * Make a string value uppercase
         *
		 * @access public
		 * @return this
         */
        public function upper()
		{
			$this->value = strtoupper($this->value);
			return $this;
        }
		
        /**
		 * Make a string value lowercase
         *
		 * @access public
		 * @return this
         */
        public function lower()
		{
			$this->value = strtolower($this->value);
			return $this;
        }
		

   
		
        /**
		 * Filter string value cleaning/deleting most common Punctuation signs
         *
		 * @access public
		 * @return this
         */
		public function cleanPunctuation()
		{	
			//allows just:    =$'€%-
			$this->value = preg_replace("/(?![=$'€%-])\p{P}/u", '', $this->value);
			
			return $this;
		}
		
        /**
		 * Filter/Sanitize the string by urlencoding characters
         *
		 * @access public
		 * @return this
         */
		public function urlEncode()
		{			
			$this->value = filter_var($this->value, FILTER_SANITIZE_ENCODED);
			
			return $this;
		}
		
        /**
		 * Filter/Sanitize the string by converting HTML characters to their HTML entities
         *
		 * @access public
		 * @return this
         */
		public function htmlEncode()
		{			
			$this->value = filter_var($this->value, FILTER_SANITIZE_SPECIAL_CHARS);
			
			return $this;
		}
		
        /**
		 * Filter/Sanitize the string by removing illegal characters from emails
         *
		 * @access public
		 * @return this
         */
		public function cleanMail()
		{			
			$this->value = filter_var($this->value, FILTER_SANITIZE_EMAIL);
			
			return $this;
		}		
		
        /**
		 * Filter/Sanitize the string by removing illegal characters from numbers
         *
		 * @access public
		 * @return this
         */
		public function cleanNumber()
		{			
			$this->value = filter_var($this->value, FILTER_SANITIZE_NUMBER_INT);
			
			return $this;
		}	

        /**
		 * Filter/Sanitize the string by removing illegal characters from float numbers
         *
		 * @access public
		 * @return this
         */
		public function cleanFloat()
		{			
			$this->value = filter_var($this->value, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION);
			
			return $this;
		}
		
        /**
		 * Filter/Strip HTML and PHP tags except the defined basic tags in array "$basicTags"
         *
		 * @access public
		 * @return this
         */
		public function basicTags()
		{			
			$this->value = strip_tags($this->value, self::$basicTags);
			
			return $this;
		}
		
        /**
		 * cast/converts the string value to int, float or bool
         * for bool casting uses the array $boolCastingList to determine the value
		 * 
		 * @access public
		 * @return this
		 * @param string $type
         */
		public function convertTo($type)
		{	
			
			switch (strtolower($type))
			{
				case "int":
					$this->value = intval($this->value);
					break;
				case "float":
					$this->value = floatval($this->value);
					break;
				case "bool":
					
					if(is_string($this->value))
					{
						$val = strtolower(trim($this->value));
						if(array_key_exists($val,$this->boolCastingList))
						{
							$this->value = $this->boolCastingList[$val];
						}
					}
					else
					{
						$this->value = boolval($this->value);
					}
					
					break;
			}			
			
			return $this;
		}
		
        /**
		 * Format a number with grouped thousands
		 * 
		 * @access public
		 * @return this
		 * @param string $decimals The number being formatted.
		 * @param string $dec_point Sets the number of decimal points.
		 * @param string $thousands_sep Sets the separator for the decimal point.
         */
		public function numberFormat($decimals = 0,$dec_point = ".",$thousands_sep = ",")
		{			
			if(is_string($this->value))
			{
				$this->value = floatval($this->value);
			}
			$this->value = number_format($this->value,$decimals,$dec_point,$thousands_sep);
			
			return $this;
		}
		
        /**
		 * Convert MS Word special characters to web safe characters.
		 * [“, ”, ‘, ’, –, …] => [", ", ', ', -, ...]
		 * 
		 * @access public
		 * @return this
         */
		public function replaceMsWord()
		{			
			$word_open_double  = '“';
			$word_close_double = '”';
			$web_safe_double   = '"';

			$this->value = str_replace(array($word_open_double, $word_close_double), $web_safe_double, $this->value);

			$word_open_single  = '‘';
			$word_close_single = '’';
			$web_safe_single   = "'";

			$this->value = str_replace(array($word_open_single, $word_close_single), $web_safe_single, $this->value);

			$word_em     = '–';
			$web_safe_em = '-';

			$this->value = str_replace($word_em, $web_safe_em, $this->value);

			$word_ellipsis = '…';
			$web_ellipsis  = '...';

			$this->value = str_replace($word_ellipsis, $web_ellipsis, $this->value);
			return $this;
		}
		
		
        /**
		 * converts a string text in a url slug, for example, the title of some article can be escaped for add it in to URL
		 * eg. text: "Title tag optimization guide" becomes: title-tag-optimization-guide and you can use like: www.some.com/title-tag-optimization-guide/
		 * 
		 * @access public
		 * @return this
         */
		public function urlWebSlug()
		{			
			$url = strip_tags($this->value);
			$url = str_replace('&nbsp;',' ', $url);	
			$url = html_entity_decode($url);						   
			$url = trim($url);
		
			$url = mb_strtolower($url,'UTF-8');
			
			$url = preg_replace('/\s\s+/u', chr(32), $url);

			//Replace Latin special characters
			$find = array('á', 'é', 'í', 'ó', 'ú', 'ñ');
			$repl = array('a', 'e', 'i', 'o', 'u', 'n');
			$url = str_replace ($find, $repl, $url);
			
			// We add the Hyphen-minus characters
			$find = array(' ', '&', '\r\n', '\n', '+');
			$url = str_replace ($find, '-', $url);
			
			// Eliminate and replace other special characters
			$find = array('/[^a-z0-9\-<>]/', '/[\-]+/', '/<[^>]*>/');
			$repl = array('', '-', '');
			$url = preg_replace ($find, $repl, $url);
			
			if( strlen($url) > 2000 )
			{
				$url = substr($url, 0,  2000);
			}
			
			$this->value = $url;
			
			return $this;
		}
		

		
     
        /**
		 * Return filtered string value cleaning/deleting all words found in the array $es_noiseWords
         *
		 * @access public
		 * @return string 
		 * @param bool $sortByAppearances sort the result descending of the most appeared words
         */
		public function cleanNoiseWords($text,$sortByAppearances = true)
		{
			$text = strtolower($text);
			
			//cleanPunctuation, allows just:    =$'€%-
			$text = preg_replace("/(?![=$'€%-])\p{P}/u", '', $text);			

			$text = preg_replace('/\s\s+/u', chr(32), $text);// normalize spaces

			$text = " $text ";

			$words = explode(',', self::$es_noiseWords);

			foreach ($words as $word) {
				$word = trim($word);

				$word = " $word "; // Normalize

				if (stripos($text, $word) !== false) {
					$text = str_ireplace($word, chr(32), $text);
				}
			}

			$text = trim($text);
			
			
			$words = explode(chr(32),$text);
			$finalWords = [];
			
			foreach ($words as $word)
			{
				$word = trim($word);
				if($word != "")
				{
					if(array_key_exists($word,$finalWords) )
					{
						$finalWords[$word]++;
					}
					else
					{
						$finalWords[$word]=0;
					}
					
				}				
			}
			
			if($sortByAppearances)
			{
				arsort($finalWords);
			}
			
			
			
			$text = implode(chr(32),array_keys($finalWords));
			
			
			return $text;
		}
		
		
        /**
         * Determines after validate all fields if has no errors
		 * 
         * @access public
         * @return boolean
         */
        public function isSuccess()
		{
            if(empty($this->errors))
			{ 
				return true;
			}
			else{
				return false;
			}
        }
        
        /**
         * return all errors array or false if no errors
		 * 
         * @access public
         * @return boolean
         */
        public function getErrors()
		{
            if(!$this->isSuccess()) return $this->errors;
        }
        
        /**
         * return all errors in html list
		 * 
         * @access public
         * @return boolean
         */
        public function displayErrors()
		{
            
            $html = '<ul>';
                foreach($this->errors as $error)
				{
                    $html .= '<li>'.$error.'</li>';
                }
            $html .= '</ul>';
            
            return $html;
            
        }
        
        /**
         * prints list of errors
		 * 
         * @access public
         * @return boolean
         */
        public function printErrors()
		{
            
            if(!$this->isSuccess())
			{
               
                foreach($this->errors as $error)
				{
                    echo "$error<br/>";
                }
                exit;
                
            }else{
                return true;
            }
        
        }
        
        /**
         * Check if the $value is a int number
         *
         * @param mixed $value
         * @return boolean
         */
        public static function is_int($value)
		{
            if(filter_var($value, FILTER_VALIDATE_INT))
			{ 
				return true;
			}
			return false;
        }
        
        /**
         * Check if the $value is a float number
         *
         * @param mixed $value
         * @return boolean
         */
        public static function is_float($value)
		{
            if(filter_var($value, FILTER_VALIDATE_FLOAT))
			{
				return true;
			}
			return false;
        }
        
        /**
         * Check if the $value only contanis alphabetic chars. shorcut to 'patternCheck("alpha",$value)'
         *
         * @param mixed $value
         * @return boolean
         */
        public static function is_alpha($value)
		{
			return self::patternCheck("alpha",$value);
        }
        
        /**
         * Check if the $value only contanis alphabetic chars including spaces. shorcut to 'patternCheck("words",$value)'
         *
         * @param mixed $value
         * @return boolean
         */
        public static function is_words($value)
		{
			return self::patternCheck("words",$value);
        }

        /**
         * Check if the $value only contanis alphabetic chars including numbers. shorcut to 'patternCheck("alphanum",$value)'
         *
         * @param mixed $value
         * @return boolean
         */
        public static function is_alphanum($value)
		{
            return self::patternCheck("alphanum",$value);
        }
        
        /**
         * Check if the $value well formatted URL (Uniform Resource Locator)
         *
         * @param mixed $value
         * @return boolean
         */
        public static function is_url($value)
		{
            if(filter_var($value, FILTER_VALIDATE_URL))
			{ 
				return true;
			}
			return false;
        }
        
        /**
         * Check if the $value is bool, including tel values in array "$boolCastingList"
         *
         * @param mixed $value
         * @return boolean
         */
        public static function is_bool($value)
		{
			if(is_string($value))
			{
				$val = strtolower(trim($value));
				if(array_key_exists($val,self::$boolCastingList))
				{
					return true;
				}
			}
			else
			{
				if(filter_var($value, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE) != NULL)
				{
					return true;
				}
			}
			return false;
        }
        
        /**
         * Check if the $value well formatted email address
         *
         * @param mixed $value
         * @return boolean
         */
        public static function is_email($value)
		{
            if(filter_var($value, FILTER_VALIDATE_EMAIL)) return true;
        }
        
    }



/*
										Examples
----------------------------------------------------------------------------------------



// Basic Usage

In this example we going to validate one field setting a name and pass the value.
the name is show in the error.
and the values pass by reference to evaluate


// post data example
$_POST = ["age"=>"18"];

$valid = new validation();//our validator

$valid->name("age value post")->value($_POST["age"])->pattern("int"); // simple validation

var_dump($valid->isSuccess()); // check if is valid

$_POST = ["age"=>"a"];
$valid->name("my age ")->value($_POST["age"])->pattern("int"); // simple validation

var_dump($valid->isSuccess()); //in this case return false
var_dump($valid->getErrors()); // return array of errors


bool(true)
bool(false)
array(1) {
  [0]=>
  string(40) "Field format my age  not valid.(pattern)"
}

----------------------------------------------------------------------------------------
Setting the name of field

the method "name" is used for set the name of the field shown in error messages, but it is the "key" of array of data or $_FILES also sets the actual value to validate or firter.
e.g.


//using the name as key

// post data example
$_POST = [
	"age"=>"18",
	"name" => 'Rafael Antonio',
];

$valid = new validation();//our validator
$valid->data($_POST); // assigning by reference all array data to evaluate

$valid->name("age")->pattern("int");
$valid->name("name")->pattern("words");

print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();


//using the name as text to show in messages, needs to set the value manually

// post data example
$_POST = [
	"age"=>"18",
	"name" => 'Rafael Antonio',
];

$valid = new validation();//our validator

$valid->name("age of user")->value($_POST["age"])->pattern("int");
$valid->name("name of user")->value($_POST["name"])->pattern("int");// make error

print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();


----------------------------------------------------------------------------------------
validation assigning all array data
in these case we pass all data array by reference to validate, and use the method "name($name)" to determine the key of array to evaluate



// post data example
$_POST = [
	"age"=>"18",
	"name" => 'Rafael Antoño',
	"bool" => 'yes',
	"int" => '56',
	"float" => '95.3',
	"mail" => 'max_carnage@gmail.co'
];

$valid = new validation();//our validator

$valid->data($_POST); // assigning all array data to evaluate

$valid->name("age")->pattern("int"); // simple validation only pass the name as 'key' to evaluate

print "<pre>";
var_dump($valid->isSuccess()); // check if is valid return "bool(true)"
print "</pre>";



----------------------------------------------------------------------------------------
validation assigning all data in a object
in these case we pass all object properties by reference to validate, and use the method "name($name)" to determine the properties of object to evaluate


//example of object data
class usr
{
	public  $id = 0;
	public	$age = '18';
	public  $mail = 'max_carnage@gmail.co';
	public  $name = 'Rafael Antoño';
	public  $rol = 'admin';
	public  $enabled = false;

}//EOC

$usr = new usr(); // instance of object

$valid = new validation();//our validator

$valid->data($usr); // assigning all data to evaluate

$valid->name("age")->pattern("int"); // simple validation only pass the name as property to evaluate

print "<pre>";
var_dump($valid->isSuccess()); // check if is valid
print "</pre>";


----------------------------------------------------------------------------------------
validating $_FILES array
the same like in previous examples but in this case we use method "file($file)" to set the value


// FILES data example
$_FILES = [
    "file1" => [
            "name" => 'MyFile.txt', //(comes from the browser, so treat as tainted)
            "type" => 'text/plain', // (not sure where it gets this from - assume the browser, so treat as tainted)
            "tmp_name" => '/tmp/php/php1h4j1o', //(could be anywhere on your system, depending on your config settings, but the user has no control, so this isn't tainted)
            "error" => 'UPLOAD_ERR_OK', // (= 0)
            "size" => '123'   //(the size in bytes)
        ]
];


$valid = new validation();//our validator

$valid->data($usr); // assigning all data to evaluate

$valid->name("my file")->value($_FILES["file1"])->required(); // simple validation if exist or not 
$valid->name("file1")->required(); // in this sentence we only pass the "key" and the class find the value in the $_FILES array

print "<pre>";
var_dump($valid->isSuccess()); // check if is valid
print "</pre>";

----------------------------------------------------------------------------------------
get list of errors

you can access to the array directly:

print "<pre>";
var_dump($valid->errors);
print "</pre>";


or with the functions:

print "<pre>";
var_dump($valid->getErrors()); //get the array if the validation has errors or false if not
print "</pre>";

echo $valid->displayErrors();// get HTML list

$valid->printErrors();// print error list separated by "<br/>"



----------------------------------------------------------------------------------------
chaining methods for validate


you can validate some input for various methods and filtering in the same line:

$valid->name("age")->cleanNumber()->pattern("int")->max(8)->min(3)->required();




----------------------------------------------------------------------------------------
clean data


you can clean all data at one using method "xssCleanAllData()", it try to avoid an Cross-site scripting (XSS) atack, eliminates html/php tags, converts special chars in html entities and normalice spaces to ascii space (32),


$valid->data($_POST);
$valid->xssCleanAllData();

or

$valid->data($_POST,true);

if you only want to clean single value you can use:

$valid->name("personAddress")->xssClean();


----------------------------------------------------------------------------------------
set of validations

required

check the value is if not null or empty string


$valid = new validation();//our validator

$_POST = [
	"usr"=>"my-us3r_n4m3"
];


$valid->data($_POST);

$valid->name("usr")->required(); // any lowercase letter (a-z), number (0-9), an underscore, or a hyphen from 3 to 16 chars
$valid->name("noData")->required(); 

print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();



----------------------------------------------------------------------------------------
patterns



$valid = new validation();//our validator

$_POST = [
	"query"=>"/?id=1&data=some-data_x", //uri
	"urldir"=>"ftp://aeneas.mit.edu/some.html#one?id=1&data=some", //url
	"text"=>"someText", //alpha
	"text2"=>"Some Text",//words
	"text3"=>"3000Text",//alphanum
	"num"=>"15",//int
	"num2"=>"15.16",//float
	"telephone"=>"(55)57-35-89-36",//tel
	"text4"=>"some text -.,;:!%&()?+'°#/@",//text    leters,space and -.,;:!"%&()?+'°#/@
	"filename"=>"Californication.mp3",//file
	"foldername"=>"Peppers",//folder
	"personAddress"=>"Charles W. Anderson (Dear Mr. Ambassador) Department of State 2050 Washington, DC 20521-2050",//address     leters,space and .,()°-
	"date1"=>"01-05-2019",//date_dmy
	"date2"=>"2019-01-05",//date_ymd
];


$valid->data($_POST); 

$valid->name("query")->pattern("querystring"); 
$valid->name("urldir")->pattern("url"); 
$valid->name("text")->pattern("alpha"); 
$valid->name("text2")->pattern("words"); 
$valid->name("text3")->pattern("alphanum"); 
$valid->name("num")->pattern("int"); 
$valid->name("num2")->pattern("float"); 
$valid->name("num2")->pattern("float"); 
$valid->name("telephone")->pattern("tel"); 
$valid->name("text4")->pattern("text"); 
$valid->name("filename")->pattern("file"); 
$valid->name("foldername")->pattern("folder"); 
$valid->name("personAddress")->pattern("address"); 
$valid->name("date1")->pattern("date_dmy"); 
$valid->name("date2")->pattern("date_ymd");

print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();



----------------------------------------------------------------------------------------
customPattern

$valid = new validation();//our validator

$_POST = [
	"myData"=>"my-us3r_n4m3"// Username 
];


$valid->data($_POST);

$valid->name("myData")->customPattern("^[a-z0-9_-]{3,16}$"); // any lowercase letter (a-z), number (0-9), an underscore, or a hyphen from 3 to 16 chars


print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();

----------------------------------------------------------------------------------------
Determine if the provided numeric value is min, max or equal to a specific value 


$valid = new validation();//our validator

$_POST = [
	"age"=>"18",
	"age2"=>"6"
];


$valid->data($_POST);

$valid->name("age")->required()->min(10)->max(15); //shows an error
$valid->name("age2")->required()->min(1);// >= 1
$valid->name("age2")->required()->max(10); // <= 10
$valid->name("age2")->required()->equal(6); // == 6
$valid->name("age2")->required()->range(100,200); // >= 1 , <= 10


print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();




----------------------------------------------------------------------------------------
Determine if the provided string length is min, max or equal to a specific value


$valid = new validation();//our validator

$_POST = [
	"name"=>"Rafael Antonio",
	"last"=>"Torres Romero"
];


$valid->data($_POST);

$valid->name("name")->minLen(5);
$valid->name("name")->maxLen(90);
$valid->name("name")->exactLen(14);
$valid->name("last")->rangeLen(5,9); // show error




print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();



----------------------------------------------------------------------------------------
Determine if a string has character separated words and the counted words are min, max or equal to a specific value

$valid = new validation();//our validator

$_POST = [
	"text1"=>"Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
	"text2"=>"Nunc-et-quam-nec-risus-tempor-sodales-porta-at-mauris."
];


$valid->data($_POST);

$valid->name("text1")->minWords(5);
$valid->name("text1")->maxWords(90);
$valid->name("text2")->exactWords(10,"-");//define "-" a delimiter
$valid->name("text2")->rangeWords(5,9,"-"); // show error




print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();


----------------------------------------------------------------------------------------
Determine if a string or number are equal than the provided value


$valid = new validation();//our validator

$_POST = [
	"age"=>"36",
	"name"=>"Rafael"
];


$valid->data($_POST);

$valid->name("age")->equal(36);
$valid->name("name")->equal("rafael");// shows error because case sensitive


print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();



----------------------------------------------------------------------------------------
Determine if a string starts with some element in predefined comma separated list

$valid = new validation();//our validator


$_POST = [
	"text"=>"Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
	"text2"=>"ipsum dolor sit amet, consectetur adipiscing elit.",
	"text3"=>"dolor sit amet, consectetur adipiscing elit.",
	"text4"=>"sit amet, consectetur adipiscing elit.",
	"name"=>"Rafael Antonio Torres Romero"
];


$valid->data($_POST);

$valid->name("text")->beginsWith("Lorem,ipsum,dolor");
$valid->name("text2")->beginsWith("Lorem,ipsum,dolor");
$valid->name("text3")->beginsWith("Lorem,ipsum,dolor");
$valid->name("text4")->beginsWith("Lorem,ipsum,dolor");// shows error
$valid->name("name")->beginsWith("rafael");// shows error because case sensitive


print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();





----------------------------------------------------------------------------------------
Determine if a string contains or not some element in predefined comma separated list


$valid = new validation();//our validator


$_POST = [
	"text"=>"Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
	"name"=>"Rafael Antonio Torres Romero"
];


$valid->data($_POST);

$valid->name("text")->contains("Lorem,ipsum,dolor");
$valid->name("name")->contains("Lorem,ipsum,dolor");// shows error
$valid->name("name")->contains("torres");// shows error because case sensitive
$valid->name("name")->notContains("Lorem,ipsum,dolor");// the opposite, NOT contains


print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();


----------------------------------------------------------------------------------------
Determine if a Upload file size is min, max or in range size

// in these case the values to validate is an element of the array $_FILES that is HTTP File Upload variable in php
// and not is required use the function $valid->data(); to pass the values. it search automatically

$valid = new validation();//our validator

// FILES data example
$_FILES = [
    "file1" => [
            "name" => 'bg.jpg', //(comes from the browser, so treat as tainted)
            "type" => 'text/plain', // (not sure where it gets this from - assume the browser, so treat as tainted)
            "tmp_name" => 'bg.jpg', //(could be anywhere on your system, depending on your config settings, but the user has no control, so this isn't tainted)
            "error" => 'UPLOAD_ERR_OK', // (= 0)
            "size" => '446000'   //(the size in bytes)
        ]
];


$valid->name("file1")->minSize(100000);// the size in bytes
$valid->name("file1")->maxSize("600000");
$valid->name("file1")->rangeSize(100000,600000);
$valid->name("file1")->maxSize("321000");// shows error

print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();





----------------------------------------------------------------------------------------
Upload file mime types and images file validation


$valid = new validation();//our validator

// FILES data example
$_FILES = [
    "file1" => [
            "name" => 'bg.jpg', //(comes from the browser, so treat as tainted)
            "type" => 'text/plain', // (not sure where it gets this from - assume the browser, so treat as tainted)
            "tmp_name" => 'bg.jpg', //(could be anywhere on your system, depending on your config settings, but the user has no control, so this isn't tainted)
            "error" => 'UPLOAD_ERR_OK', // (= 0)
            "size" => '446000'   //(the size in bytes)
        ]
];


$valid->name("file1")->validMime("text/plain,text/html,image/jpeg,image/png,audio/ogg,video/mp4"); //you can use a complete mime type string in the list
$valid->name("file1")->validMime("text/p,text/h,image/,audio/,video/");// you can use a partial mime type string in the list
//valid extension in file and image file (open the image and gets the extension in base to mime type)
$valid->name("file1")->validImage("jpg,gif,png");
//check dimensions of image (width x height)
//min, max 
$valid->name("file1")->validImage("jpg,gif,png","500x300","2000x1500");
//just min dimensions
$valid->name("file1")->validImage("","500x300");
//just max dimensions
$valid->name("file1")->validImage("","","2000x1500");
//file size min, max
$valid->name("file1")->validImage("jpg,gif,png","500x300","2000x1500",100000,600000);//full options
//just min size
$valid->name("file1")->validImage("","","",100000);
//just max size
$valid->name("file1")->validImage("","","","",600000);


print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();


----------------------------------------------------------------------------------------
simple validation file extension

$valid = new validation();//our validator

// FILES data example
$_FILES = [
    "file1" => [
            "name" => 'bg.jpg', //(comes from the browser, so treat as tainted)
            "type" => 'text/plain', // (not sure where it gets this from - assume the browser, so treat as tainted)
            "tmp_name" => 'bg.jpg', //(could be anywhere on your system, depending on your config settings, but the user has no control, so this isn't tainted)
            "error" => 'UPLOAD_ERR_OK', // (= 0)
            "size" => '446000'   //(the size in bytes)
        ]
];


$valid->name("file1")->ext("jpg,gif,png");// simple validation extension



print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();




----------------------------------------------------------------------------------------
check if url exist


// http code examples test in https://httpstat.us/

$valid = new validation();//our validator

$_POST = [
	"page"=>"https://www.rafasoft.me/",
	"page2"=>"https://httpstat.us/201",
	"page3"=>"https://httpstat.us/205",
	"page4"=>"https://httpstat.us/302",
	"page5"=>"https://httpstat.us/403",
	"video"=>"https://www.youtube.com/watch?v=drQ9y6WkgdQ",
	"imagen"=>"http://dlanham.com/art/falsealarm/preview.jpg"
];


$valid->data($_POST);


$valid->name("page")->urlExists();// by default only the code 200 is take as valid
$valid->name("page2")->urlExists("201,205,302,403");// but you can add extra http status codes to take as valid
$valid->name("page3")->urlExists("201,205,302,403");
$valid->name("page4")->urlExists("201,205,302,403");
$valid->name("page5")->urlExists("201,205,302,403");
$valid->name("video")->urlExists("301");
$valid->name("imagen")->urlExists();



print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();



----------------------------------------------------------------------------------------
check if domain exist


// https://www.expireddomains.net/backorder-expired-domains/ for testing

$valid = new validation();//our validator

$_POST = [
	"page"=>"https://www.rafasoft.me/",
	"page2"=>"www.youtube.com/",
	"page3"=>"google.com",
	"page4"=>"LiveDrive.mx",
	"page5"=>"Azerbaijan.mx"
];


$valid->data($_POST);


$valid->name("page")->domainExists();
$valid->name("page2")->domainExists();
$valid->name("page3")->domainExists();
$valid->name("page4")->domainExists();// not exist
$valid->name("page5")->domainExists();// not exist




print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();



----------------------------------------------------------------------------------------
validating ip, date



$valid = new validation();//our validator



$_POST = [
	"ip"=>"127.0.0.1",
	"ipv4"=>"19.117.63.126",
	"ipv6"=>"2001:0db8:85a3:08d3:1319:8a2e:0370:7334",
	"date1"=>"2019-03-07", //('Y-m-d') or datetime ('Y-m-d H:i:s')
	"date2"=>"2000-01-20 16:15:00", 
	"date3"=>"20/01/2000 10:18:36", // custom format d/m/Y H:i:s, http://php.net/manual/en/datetime.createfromformat.php
];


$valid->data($_POST);


$valid->name("ip")->validIp();
$valid->name("ipv4")->validIpv4();
$valid->name("ipv6")->validIpv6();



$valid->name("date1")->validDate();
$valid->name("date2")->validDate();
$valid->name("date3")->validDate("d/m/Y H:i:s");// custom format


print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();



----------------------------------------------------------------------------------------
validating human name, bad words, text patterns

$valid = new validation();//our validator



$_POST = [
	"name"=>"Rafael ántoño's-II",
	
	"text"=>"Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
	
	"text_js"=>"document.getElementById(id); setTimeout(later, wait); alert();",
	"text_css"=>"-webkit-text-size-adjust: none; box-sizing: border-box;",
	"text_html"=>"some imput <h1     >some text</h1       > <div></div>",
	"text_sql"=>"select              *              from        table  ",
	
	"text_patterns1"=>"AAAAAAAAAAAAsAAAAAAAAAdAAAAAAAAAfAAAAA",
	"text_patterns2"=>"asdasdasdasdasdasdasdasd",
	"text_patterns3"=>"asdfghjklasdfghjkl",
	"text_patterns4"=>"1234567890 1234567890 1234567890 1234567890",
	"text_patterns5"=>"abcdefghijklm",
	"text_patterns6"=>"0987654321 0987654321 0987654321 0987654321",
	"text_patterns7"=>"............0000000000000007777777777777",
	"text_patterns8"=>"rafarafarafarafarafarafarafarafarafarafa"
];


$valid->data($_POST);


$valid->name("name")->validName();



$valid->name("text")->badwords("js,html,css,sql");// or "", or "all" as parameter is the same effect, validates all defined bad words (not aloowed)

$valid->name("text_js")->badwords("js,html");// just validates js and html bad words
$valid->name("text_css")->badwords("css,js");
$valid->name("text_html")->badwords("html");
$valid->name("text_sql")->badwords("sql");


$valid->name("text_patterns1")->textPatterns();//check for patterns, for example in passwords or to avoid include garbage information
$valid->name("text_patterns2")->textPatterns();
$valid->name("text_patterns3")->textPatterns();
$valid->name("text_patterns4")->textPatterns();
$valid->name("text_patterns5")->textPatterns();
$valid->name("text_patterns6")->textPatterns();
$valid->name("text_patterns7")->textPatterns(30);// it can be more strict, setting the max percentage of the string that can have one patterns, by default is 60%
$valid->name("text_patterns8")->textPatterns();


print "<pre>";
var_dump($valid->isSuccess());
print "</pre>";
echo $valid->displayErrors();






----------------------------------------------------------------------------------------
filters



$valid = new validation();//our validator



$_POST = [
	"name"=>"          <h3>Rafael antonio</h3>        ",	
	"text"=>"   Lorem ipsum ¡dolor! sit amet, ¿consectetur? adipiscing elit....    ",
	"url"=>"Lorem ipsum/dolor sit amet/consectetur.html?adipiscing=elit....&data=3659-",
	"html"=>"<h3>title</h3>",	
	"mail"=>"rafasoft ° @gm.com",	// note the space and °
	"number"=>"num123",	
	"float"=>"123.156 num",
	"html2"=>"<h3>title</h3><camvas></camvas><script></script>",
	"boolText"=>"yes",
	"intText"=>"1568",
	"floatNum"=>"1568.3698",
	"big_num"=>"15683698.69856",
	"ms Word text"=>"some “text” ‘example’… ",
	"url slug"=>"Lorem ipsum ¡dolor! sit amet, ¿consectetur? adipiscing elit....",
];


$valid->data($_POST);

echo ("<h3>Before filter:</h3>");
print '<textarea cols="150" rows="20">';
 print_r($_POST);
print '</textarea>';

$valid->name("name")->xssClean();
$valid->name("name")->lower();
$valid->name("text")->upper();
$valid->name("text")->trim();
$valid->name("text")->cleanPunctuation();
$valid->name("url")->urlEncode();//encode special char for url
$valid->name("html")->htmlEncode();//encode special char for html
$valid->name("mail")->cleanMail();//delete not allowed chars for mail
$valid->name("number")->cleanNumber();
$valid->name("float")->cleanFloat();
$valid->name("html2")->basicTags();
$valid->name("boolText")->convertTo("bool");//becomes a php bool
$valid->name("intText")->convertTo("int");//becomes a php int
$valid->name("floatNum")->convertTo("float"); //becomes a php float
$valid->name("big_num")->numberFormat(2,"-","/"); // numberFormat(); defaults: decimals = 0 , dec_point = "." , $thousands_sep = ","
$valid->name("ms Word text")->replaceMsWord();// replace some ms word chars into standard ones: “” ‘’…  to "" '' ...
$valid->name("url slug")->urlWebSlug();//converts string in a URL slug, delete extra chars and replace space into -

echo ("<h3>after filter:</h3>");
print '<textarea cols="150" rows="20">';
 print_r($_POST);
print '</textarea>';


----------------------------------------------------------------------------------------
clean Noise Words


$valid = new validation();//our validator

$_POST = [
	"text"=>"Cada año en la ciudad de Ginebra, Suiza, se lleva a cabo una de las mayores exposiciones de automóviles en todo el mundo, donde los mayores fabricantes, y otros más nuevos, presentan sus nuevos vehículos y conceptos visionarios. Este año el Salón del Automóvil de Ginebra ha estado protagonizado por los automóviles eléctricos.",	

];

$usefulWords = $valid->cleanNoiseWords($_POST["text"],false);// No sort
$usefulWords2 = $valid->cleanNoiseWords($_POST["text"]);// sorted by word count

print "<pre>";
var_dump($_POST["text"]);
var_dump($usefulWords);
var_dump($usefulWords2);

print "</pre>";


----------------------------------------------------------------------------------------
cheack success validations and get errors


$valid = new validation();//our validator

$_POST = [
	"name"=>"Rafael Antonio",
	"last"=>"Torres Romero"
];


$valid->data($_POST);

$valid->name("name")->minLen(5);
$valid->name("name")->maxLen(90);
$valid->name("name")->exactLen(14);
$valid->name("last")->rangeLen(5,9); //get error


print "<pre>";
var_dump($valid->isSuccess());// if no error TRUE otherwise FALSE
print "</pre>";

echo $valid->displayErrors();// get html list

print "<pre>";
var_dump($valid->getErrors()); // get array of errors
print "</pre>";

print "<pre>";
$valid->printErrors(); // echo every error in array
print "</pre>";


----------------------------------------------------------------------------------------
extra methods to cheack sigle values

print "<pre>";
// bools
echo "\nbools:\n\n";
var_dump(validation::is_bool("true"));
var_dump(validation::is_bool("1"));
var_dump(validation::is_bool("yes"));
var_dump(validation::is_bool("ok"));
var_dump(validation::is_bool("sí"));
var_dump(validation::is_bool("no"));
var_dump(validation::is_bool(1));
var_dump(validation::is_bool(""));//false, it is not bool just empty string

echo "\nnumbers:\n\n";
var_dump(validation::is_int(5.8));//false, is float
var_dump(validation::is_int(5));
var_dump(validation::is_float(5));//true
var_dump(validation::is_float(5.0));//true

echo "\nchars:\n\n";
var_dump(validation::is_alpha("asdadasd"));//only chars, not spaces not number not punctuation
var_dump(validation::is_words("Cada año en la ciudad de Ginebra Suiza")); //only chars and spaces, not number not punctuation
var_dump(validation::is_alphanum("555345asdadasd"));//only chars and numbers,  not space not punctuation
var_dump(validation::is_url("https://www.google.com/webhp?hl=es-419&ictx=2&sa=X&ved=0ahUKEwiCmbSCrfHgAhUQT6wKHf6XBz8QPQgH"));
var_dump(validation::is_email("rafasoft@gm.com"));


print "</pre>";



*/



?>